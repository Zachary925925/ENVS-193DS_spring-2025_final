---
title: "ES193DS Spring final"
format: html
author: Zach Wang
date: 2025-06-08
---

```{r setup}
library(tidyverse)
library(lubridate)
library(ggplot2)
library(car)
library(scales)
library(MuMIn)
library(DHARMa)
library(ggplot2)
library(ggeffects)

nest_boxes <- read_csv("data/occdist.csv")

```

# Problem 1

## a.

In part 1, they used \_\_\_\_\_\_\_. In part 2, they used \_\_\_\_\_\_\_.

# Problem 2

## a.

```{r}


sst <- read_csv("data/SST_update2023.csv") # Read in the data

# Clean
sst_clean <- sst |>
  mutate(year = as.factor(year(ymd(date)))) |> # Extract year 
  mutate(month = factor(month(ymd(date), 
                              label = TRUE, abbr = TRUE), # extract month
                        levels = month.abb, 
                        ordered = TRUE)) |>
  group_by(year, month) |> # Group by year and month
  summarize(mean_monthly_sst = mean(temp, na.rm = TRUE), 
            .groups = "drop")   # mean monthly SST


sst_clean |> slice_sample(n = 5) # display 5 random rows 
str(sst_clean) #structure of sst_clean


```

## b.

```{r}


sst_filtered <- sst_clean |> # Filter data for 2018 to 2023
  filter(year %in% as.character(2018:2023))

# Create the plot
ggplot(sst_filtered, aes(x = month, y = mean_monthly_sst, group = year, color = year)) +
  # lines and points
  geom_line() +
  geom_point() +
  
  scale_color_manual(
    values = colorRampPalette(c("lightblue",  # Color gradient from light to dark
                                "darkblue"))(length(unique(sst_filtered$year)))
  ) +
  labs(  # labels and text
    x = "Month",
    y = "Mean monthly sea surface temperature (°C)",
    color = "Year"
  ) +
  
  
  scale_x_discrete(drop = FALSE) + #  x-axis labels to display months in order
  
  theme( # make legend
    legend.position = c(0.1, 0.75),    # Adjust position
    legend.background = element_blank(), # No outline for legend box
    panel.border = element_rect(color = "black", fill = NA), #panel outline
    panel.background = element_rect(fill = "white"), # background color
    panel.grid = element_blank() 
  )




```

# Problem 3
## a.
For 4 different columns:

sp:
1 means the nest box was occupied by a Swift Parrot for breeding during that season.
0 means it was either empty or used by a different species.

cs:
1 means the box was occupied by a Common Starling.
0 means it was occupied by another species or was empty.

tm:
1 means occupancy by a Tree Martin.
0 means it was used by another species or unoccupied.

e:
1 means that the box remained unoccupied (empty).
0 means it was occupied by any bird species.

## b.
Swift Parrots are the target species for the nest boxes and are critically endangered, and Common Starlings and Tree Martins are considered competitors that may occupy the boxes at the expense of the Swift Parrots. Unlike the other two species, Swift Parrots rarely breed in the same location in successive years, making permanent nest boxes less effective for them and more likely to benefit the competitors.

## c.
The two “seasons” in this study are 2016/2017, when the nest boxes were just put up, and 2019/2020, three years later. The main difference is that the boxes were new in the first season, but had already been around for a while in the second season, which means more time for other birds to find and start using them.

## d.
```{r}

model_table <- data.frame( 
  Model_Number = 1:4,
  Season = c("No", "Yes", "No", "Yes"), # season options
  Distance_to_Forest_Edge = c("No", "No", "Yes", "Yes"), # distance options
  Model_Description = c( # model options
    "Null model: no predictors.",
    "Season model: includes only season.",
    "Edge model: includes only distance to forest edge.",
    "Saturated model: includes both season and distance to forest edge (and interaction if needed)."
  )
)

print(model_table) # show table

```

## e. ???
```{r}

nest_boxes$season <- as.factor(nest_boxes$season) # make season (year) as a factor

names(nest_boxes)[names(nest_boxes) == "edge distance"] <- "edge_distance" # change name for distance column

model1 <- glm(sp ~ 1, data = nest_boxes, family = "binomial") # Null model


model2 <- glm(sp ~ season, data = nest_boxes, family = "binomial") # Season model


model3 <- glm(sp ~ edge_distance, data = nest_boxes, family = "binomial")# Edge model


model4 <- glm(sp ~ season + edge_distance, data = nest_boxes, family = "binomial") # Saturated model

```

## f.
```{r}

plot(simulateResiduals(model1), title = "Null model")

plot(simulateResiduals(model2), title = "Season model")

plot(simulateResiduals(model3), title = "Edge Distance model")

plot(simulateResiduals(model4), title = "Saturated model")


```

## g.
```{r}
model.sel(model1,
          model2,
          model3,
          model4)
```
The best model determined by AIC is saturated model since it has the lowest AICc (226.3).

## h.
```{r}
mod_preds <- ggpredict(model4, terms = c("edge_distance [all]", "season"))# Generate predictions from the saturated model


mod_preds$group <- as.factor(mod_preds$group) # Convert to factor 
nest_boxes$season <- as.factor(nest_boxes$season)

ggplot() +
  geom_point( # add observation points
    data = nest_boxes,
    aes(x = edge_distance,
        y = sp, 
        color = season),
    size = 3,
    alpha = 0.4
  ) +
  geom_ribbon( 
    data = mod_preds,
    aes(x = x,
        y = predicted,
        ymin = conf.low,
        ymax = conf.high,
        fill = group),
    alpha = 0.4
  ) +
  geom_line( # add prediction lines
    data = mod_preds,
    aes(x = x, y = predicted,
        color = group),
    size = 1
  ) +
  labs(  # add labels 
    x = "Distance to Forest Edge (m)",
    y = "Probability of Occupancy by Swift Parrot",
    color = "Season",
    fill = "Season",
    title = "Predicted Probability of Nest Box Occupancy by Swift Parrots"
  ) +
  theme_classic() +
  theme(
    legend.position = "right",
    panel.grid.major = element_blank(),  # remove gridlines
    panel.grid.minor = element_blank(), 
    plot.title = element_text(hjust = 0.5, face = "bold")
  ) +
  scale_color_manual(values = c("orange",
                                "lightblue")) + #set up color maually
  scale_fill_manual(values = c("orange", 
                               "lightblue")) +
  scale_y_continuous(limits = c(0, 1),
                     breaks = c(0, 0.5, 1))
```



















# Problem 4

## a.
In homework 2, my data is represented by scatter plot. To read the data, I will have to combine the location of points and axes. But in homework 3, I use triangle shape to represent each individual observation (Width, Height, Bar). 

The two visualizations both are presenting individual observations. 

In both visualizations you will be able to see counts and relation between variables. But if I arrange my visualization from homework 3 in time order, you can see by sleeping time trend through time. You can also see extra information in the data set such as if I did a running or the average heart rate of that day.

I was told that I could add more variables into this visualization. So other than using the width and height of triangles to represent burned calories and sleeping time, I try to add a bar at the to to show if I did running or not. I also try to tier the HRV into (40-45 46-50 51-55 56-60) four levels, and give each of them a different color to show the HRV level at that day. 










